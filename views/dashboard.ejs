<!DOCTYPE html>
<html class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Autocomplete CSS (if needed) -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@10.2.7/dist/css/autoComplete.02.min.css"
    />
    <script src="/js/jquery-3.6.3.min.js"></script>
    <script src="/js/qrcode.min.js"></script>
    <link href="/css/style.css" rel="stylesheet" />
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="/js/JsBarcode.all.min.js"></script>
    <link href="/dist/output.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/barcode-generator@0.1.0/index.min.js"></script>
    <link href="/css/all.min.css" rel="stylesheet" />
    <style>
      /* Optional: remove default body margin/padding to make the whole page an exact A4 size */
      body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        background-color: #f8f8f8;
      }

      /* Container for the entire A4 page */
      #a4Container {
        width: 210mm;
        height: 297mm;
        background-color: #EFE2CA; /* Or white, etc. */
        position: relative;
        margin: 1rem auto; /* center on page if you like */
      }

      /* Each invite: 210mm wide x ~99mm tall (3 invites fit in 297mm) */
      .invite-wrap {
        position: relative;
        width: 100%;
        height: 99mm;
        box-sizing: border-box;
      }

      /* The background image for each invite. 
         You can also set this as a background-image in CSS if desired. 
      */
      .invite-wrap img {
        width: 100%;
        height: 100%;
      }

      .number-text {
        position: absolute;
        bottom: 2%;
        left: 50%;
        transform: translateX(-50%);
        color: #C78D1D;
        font-weight: bold;
        font-size: 1.5rem; /* Adjust as needed */
      }

      .qrcode-area {
        position: absolute;
        bottom: 7.4rem;
        right: 2.8rem;
      }

      .barcode-area {
        position: absolute;
        top: 42%;
        right: 1.5%;
        transform: rotate(90deg);
        display: none; /* Show only if you want it; you can remove this if always needed */
      }
    </style>
  </head>

  <body style="direction: rtl;">
    <!-- Controls / Inputs -->
    <div class="flex justify-center items-center" style="margin: 1rem 0;">
      <input type="text" id="indstrial" placeholder="العنونة" />
      <input type="number" id="startNumber" placeholder="Start Number" />
      <input type="number" id="endNumber" placeholder="End Number" />
      <input type="text" id="pdfName" placeholder="Output PDF Name" />
      <button
        onclick="downloadMultipleImages()"
        type="button"
        class="text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2"
      >
        تحميل الصور
      </button>
    </div>

    <!-- A4 container that holds 3 invites stacked -->
    <div id="a4Container">
      <!-- Invite 1 -->
      <div class="invite-wrap" id="invite1">
        <img src="/img/mock15.png" alt="" />
        <div class="number-text" id="number1"></div>
        <div class="qrcode-area" id="qrcode1"></div>
        <div class="barcode-area">
          <svg id="barcode1"></svg>
        </div>
      </div>
      <!-- Invite 2 -->
      <div class="invite-wrap" id="invite2">
        <img src="/img/mock15.png" alt="" />
        <div class="number-text" id="number2"></div>
        <div class="qrcode-area" id="qrcode2"></div>
        <div class="barcode-area">
          <svg id="barcode2"></svg>
        </div>
      </div>
      <!-- Invite 3 -->
      <div class="invite-wrap" id="invite3">
        <img src="/img/mock15.png" alt="" />
        <div class="number-text" id="number3"></div>
        <div class="qrcode-area" id="qrcode3"></div>
        <div class="barcode-area">
          <svg id="barcode3"></svg>
        </div>
      </div>
    </div>

    <script>
      const { jsPDF } = window.jspdf;

      async function downloadMultipleImages() {
        const startNumber = parseInt(document.getElementById("startNumber").value);
        const endNumber = parseInt(document.getElementById("endNumber").value);
        const pdfName = document.getElementById("pdfName").value || "invites.pdf";
        const totalInvites = endNumber - startNumber + 1;
        const pdf = new jsPDF("p", "mm", "a4"); // A4 in portrait

        let currentIndex = 0; // how many invites have been processed

        // We'll process in chunks of 3 invites (3 per page)
        while (currentIndex < totalInvites) {
          // For each group of 3 invites, fill in the data
          for (let i = 1; i <= 3; i++) {
            // Hide or reset the placeholders if there's no more invite
            if (currentIndex >= totalInvites) {
              // No more invites, clear out the fields
              $(`#number${i}`).text("");
              $(`#qrcode${i}`).empty();
              $(`#barcode${i}`).empty();
            } else {
              const inviteNumber = startNumber + currentIndex;
              // Display the invite number
              $(`#number${i}`).text(inviteNumber);

              // Clear previous barcodes and QR codes
              $(`#qrcode${i}`).empty();
              $(`#barcode${i}`).empty();

              // Fetch a new ID from the server
              const indstrial = $("#indstrial").val();
              try {
                const response = await fetch("/visit/generate", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ indstrial }),
                });
                if (!response.ok) {
                  throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();

                // Generate barcode and QR
                generateBarcode(data._id, `barcode${i}`);
                generateQrBarcode(
                  `http://78.141.210.148:4005/r/${data._id}`,
                  `qrcode${i}`
                );
              } catch (err) {
                console.error("Fetch error:", err);
              }
            }
            currentIndex++;
          }

          // After filling 1..3 invites, wait a bit for barcodes/QR to render
          await new Promise((r) => setTimeout(r, 500));

          // Capture the A4 container
          await addA4PageToPDF(pdf);

          // If we still have more invites, add a page in the PDF for the next 3
          if (currentIndex < totalInvites) {
            pdf.addPage();
          }
        }

        // Finally, save the PDF
        pdf.save(pdfName);
      }

      async function addA4PageToPDF(pdf) {
        const targetDiv = document.getElementById("a4Container");
        // Use a higher scale for better resolution
        const canvas = await html2canvas(targetDiv, { scale: 2 });
        const imgData = canvas.toDataURL("image/jpeg", 1.0);

        // For A4 in portrait, dimensions are 210 x 297 mm
        // We can place the image so it exactly fills the page
        const pageWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();

        pdf.addImage(imgData, "JPEG", 0, 0, pageWidth, pageHeight);
      }

      function generateBarcode(code, elementId) {
        JsBarcode(`#${elementId}`, code, {
          displayValue: false,
          background: "#00000000",
          height: 40,
          width: 1,
        });
      }

      function generateQrBarcode(code, elementId) {
        $(`#${elementId}`).html("");
        const qrcode = new QRCode(document.getElementById(elementId), {
          text: code,
          width: 120,
          height: 120,
          colorDark: "#000000",
          colorLight: "#00000000",
          correctLevel: QRCode.CorrectLevel.H,
        });

        // Make the white parts transparent
        setTimeout(function () {
          const canvas = document.querySelector(`#${elementId} canvas`);
          const context = canvas.getContext("2d");
          const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;

          for (let i = 0; i < data.length; i += 4) {
            if (data[i] === 255 && data[i + 1] === 255 && data[i + 2] === 255) {
              data[i + 3] = 0;
            }
          }

          context.putImageData(imageData, 0, 0);
        }, 300);
      }
    </script>
  </body>
</html>
